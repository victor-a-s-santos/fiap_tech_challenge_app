name: SonarQube Cloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Install dotnet-coverage
        run: dotnet tool install -g dotnet-coverage

      - name: Add dotnet tools to PATH
        run: echo "PATH=C:\\Users\\runneradmin\\.dotnet\\tools;%PATH%" >> $GITHUB_ENV

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"victor-a-s-santos_fiap_tech_challenge_app" /o:"victor-a-s-santos" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths="TestResults\coverage.xml"
          dotnet build --no-incremental
          dotnet test --collect:"Code Coverage" --results-directory TestResults
          # Converter cobertura para formato XML, se necessário
          $coveragePath = Get-ChildItem -Path "TestResults" -Recurse -Filter "coverage.xml" | Select-Object -ExpandProperty FullName -First 1
          if (-not $coveragePath) {
            Write-Error "Cobertura de teste não foi gerada ou o arquivo não foi encontrado."
            exit 1
          }
          Write-Host "Caminho do arquivo de cobertura: $coveragePath"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


      - name: Extract Coverage Percentage
        shell: pwsh
        run: |
          if ($coveragePath) {
            $coverageXml = Get-Content "$coveragePath"
            $coverageMatch = Select-String -InputObject $coverageXml -Pattern '(?<=<coverage>)[^<]+'
            if ($coverageMatch) {
              $coverage = $coverageMatch.Matches.Value
              echo "Coverage percentage: $coverage"
              echo "coverage=$coverage" >> $env:GITHUB_ENV
            } else {
              Write-Error "Coverage percentage not found in coverage file."
            }
          }

      - name: Save Coverage Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: TestResults/coverage.cobertura.xml
